 CSS Comments starts with '/*' and ends with '*/'

CSS has various rules. Rules are written in the format of:
  selector {
      property: value
  } 
    
'*' stands for Universal Selector

type selector or element selector will rule over all elements of the given element type e.g. 
  div {
    color: white;
  }

You can govern a class with '.' before the class name e.g.
  .class-name {
    color: red;
  }

You can govern an ID with '#' before the ID name e.g.
  #ID-name {
    color: blue;
  }

You can group selectors with ',' if they share some of the same elements e.g.
  .read,
  .unread {
    color: white;
    background-color: black;
  }

  .read {
    /* several unique declarations */
  }

  .unread {
    /* several unique declarations */
  }

You can chain multiple classes together, e.g.
  .class-name1.class-name2{

  }

You can also chain an ID and class together
  #ID-name.class-name{

  }

In general, you can’t chain more than one type selector since an element can’t
be two different types at once. For example, chaining two type selectors like
div and p would give us the selector divp, which wouldn’t work since the
selector would try to find a literal <divp> element, which doesn’t exist.

Descendant combinator is represented in CSS by a single space between selectors.

So something like .ancestor .child would select an element with the class child if it has an ancestor with the class ancestor.
Another way to think of it is child will only be selected if it is nested inside of ancestor, no matter how deep.
e.g.
  <!-- index.html -->

  <div class="ancestor"> <!-- A -->
    <div class="contents"> <!-- B -->
      <div class="contents"> <!-- C -->
      </div>
    </div>
  </div>

  <div class="contents"></div> <!-- D -->

  /* styles.css */

  .ancestor .contents {
    /* some declarations */
  }

In the above example, the first two elements with the contents class (B and C) would be selected, but that last element (D) won’t be.

Frequently used CSS properties:

1. color and background-color

The color property sets an element’s text color, while background-color sets, well, the background color of an element.
e.g.
  p {
    /* hex example: */
    color: #1100ff;
    /* rgb example: */
    color: rgb(100, 0, 127);
    /* rgba: a stands for alpha(opacity) and has the range from 0 to 1 example: */
    color: rgb(250, 45, 0, 0.6);
    /* hsl example: */
    color: hsl(15, 82%, 56%);
    /* hsla example: */
    color: hsl(250, 82%, 70%, 0.5);
  }

2. Typography Basics and text-align

  font-family
  If a browser cannot find or does not support the first font in a list, it will use the next one, then the next one and so on
  e.g. font-family: "Times New Roman", sans-serif;

  font-size
  e.g. font-size: 22px

  font-weight
  Affects the boldness of text, assuming the font supports the specified weight.
  e.g. font-weight: bold 

  or 

  A number between 1 and 1000 
  e.g. font-weight: 700

  text-align
  Will align text horizontally within an element
  e.g. text-align: center

3. Image Height and Width
e.g. 
  img {
    height: auto; /* auto adjusts the size of the image without causing it to lose its proportions */
    width: 500px;
  }

It's good practice to put an image's height and width property because if an image takes longer to load than the rest of the page contents, 
the image won’t take up any space on the page at first, but will suddenly cause a drastic shift of the other page contents once it does load in.
Explicitly stating a height and width prevents this from happening, as space will be “reserved” on the page and will just appear as a blank space until the image loads.

Specificity
A CSS declaration that is more specific will take precedence over less specific ones.
1. ID selectors (most specific selector)
2. Class selectors
3. Type selectors (least specific)

Inline styles(styles used inside html) are the most specific

Specificity will only be taken into account when an element has multiple, conflicting declarations targeting it, sort of like a tie-breaker.

Universal selector '*' which has no specificity value.

Inheritance
Inheritance refers to certain CSS properties that, when applied to an element, are inherited by that element’s descendants, even if we don’t explicitly write a rule for those descendants.
Typography based properties (color, font-size, font-family, etc.) are usually inherited, while most other properties aren’t.

The exception to this is when directly targeting an element, as this always beats inheritance:
e.g.
  <!-- index.html -->
  <div id="parent">
    <div class="child"></div>
  </div>

  /* styles.css */
  #parent {
    color: red;
  }

  .child {
    color: blue;
  }

Despite the parent element having a higher specificity with an ID, the child element would have the color: blue style applied since that declaration directly targets it, while color: red from the parent is only inherited.

Rule Order: If 2 rules are in conflict of which property takes over. Whichever rule was the last defined is the winner.

Adding CSS to HTML

External CSS:
We link it to HTML File with the <link> tag
e.g.
  <head>
    <link rel="stylesheet" href="styles.css">
  </head>

The rel attribute is required, and it specifies the relationship between the HTML file and the linked file.

Internal CSS (Don't use)
Done with <style> element inside the head of the HTML file

Inline CSS (Not recommended)
Rules defined with a tag e.g.  <div style="color: white; background-color: black;">...</div>


<HTML NOTES>

You can add multiple classes to an element by using space, e.g. <div class="class-name1 class-name2 class-name3"></div>
